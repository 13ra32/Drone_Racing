// Generated by gencpp from file decomp_ros_msgs/PolyhedronArray.msg
// DO NOT EDIT!


#ifndef DECOMP_ROS_MSGS_MESSAGE_POLYHEDRONARRAY_H
#define DECOMP_ROS_MSGS_MESSAGE_POLYHEDRONARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <decomp_ros_msgs/Polyhedron.h>

namespace decomp_ros_msgs
{
template <class ContainerAllocator>
struct PolyhedronArray_
{
  typedef PolyhedronArray_<ContainerAllocator> Type;

  PolyhedronArray_()
    : header()
    , polyhedrons()
    , ids()  {
    }
  PolyhedronArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , polyhedrons(_alloc)
    , ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::decomp_ros_msgs::Polyhedron_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::decomp_ros_msgs::Polyhedron_<ContainerAllocator> >::other >  _polyhedrons_type;
  _polyhedrons_type polyhedrons;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ids_type;
  _ids_type ids;





  typedef boost::shared_ptr< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> const> ConstPtr;

}; // struct PolyhedronArray_

typedef ::decomp_ros_msgs::PolyhedronArray_<std::allocator<void> > PolyhedronArray;

typedef boost::shared_ptr< ::decomp_ros_msgs::PolyhedronArray > PolyhedronArrayPtr;
typedef boost::shared_ptr< ::decomp_ros_msgs::PolyhedronArray const> PolyhedronArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decomp_ros_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'decomp_ros_msgs': ['/home/ralexander/catkin_ws_trr/src/Teach-Repeat-Replan/utils/DecompRos/decomp_ros_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a02cec87cf9719f586eda49f2fc2c4ea";
  }

  static const char* value(const ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa02cec87cf9719f5ULL;
  static const uint64_t static_value2 = 0x86eda49f2fc2c4eaULL;
};

template<class ContainerAllocator>
struct DataType< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decomp_ros_msgs/PolyhedronArray";
  }

  static const char* value(const ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
Polyhedron[] polyhedrons\n\
int32[] ids\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: decomp_ros_msgs/Polyhedron\n\
geometry_msgs/Point[] points\n\
geometry_msgs/Point[] normals #norm is an outer vector\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.polyhedrons);
      stream.next(m.ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PolyhedronArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decomp_ros_msgs::PolyhedronArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "polyhedrons[]" << std::endl;
    for (size_t i = 0; i < v.polyhedrons.size(); ++i)
    {
      s << indent << "  polyhedrons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::decomp_ros_msgs::Polyhedron_<ContainerAllocator> >::stream(s, indent + "    ", v.polyhedrons[i]);
    }
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECOMP_ROS_MSGS_MESSAGE_POLYHEDRONARRAY_H
