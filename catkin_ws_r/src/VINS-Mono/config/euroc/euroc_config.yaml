%YAML:1.0

#common parameters 
imu_topic: "/rs/imu0/data"        # IMU Topic Generated from rs4se
image_topic: "/rs/ir0/image"      # Immage topic generated from rs4se
output_path: "/home/ralexander/output/vins_output/d435i"      # Save and Load Path 

#camera calibration (Using Shu's Values)
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.0
   k2: 0.0
   p1: 0.0
   p2: 0.0
projection_parameters:
   fx: 390.15472412109375
   fy: 390.15472412109375
   cx: 320.4252014160156
   cy: 246.77757263183594

# Extrinsic parameters between IMU and Camera.
estimate_extrinsic: 1 # Unless you are very sure about the extrinsic paramiters (relation of camera to center of robot) I would recomend leaving this a 1


# 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

# These matricies determine the translation and rotation between the sensors origin (IMU) and the cameras origin 
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -1.2667911031140977e-01, -1.1420114444155305e-02,
       9.9187800862646003e-01, -9.9162551264078624e-01,
       -2.3869007035934642e-02, -1.2692168129605097e-01,
       2.5124603292539460e-02, -9.9964986444714765e-01,
       -8.3007722647727711e-03 ]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ -3.0782232154208534e-02, -1.1031498262729414e-01,
       8.3941686879125624e-03 ]



#feature traker paprameters (Using Shu's Values) ###########
max_cnt: 110            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.2          # accelerometer measurement noise standard deviation. 
gyr_n: 0.05         # gyroscope measurement noise standard deviation.     
acc_w: 0.002        # accelerometer bias random work noise standard deviation.  
gyr_w: 0.0004       # gyroscope bias random work noise standard deviation.     
g_norm: 9.6         # gravity magnitude measured by IMU 

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1             # useful in real-time and large project
pose_graph_save_path: "/home/ralexander/output/vins_output/d435i" # save and load path

#unsynchronization parameters
estimate_td: 1                       # 1 = program will optamize arround the innital td guess
td: 0.007                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
